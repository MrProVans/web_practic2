import './currency.css';

export default function Currency() {
    return `
        <section class="currency-page">
            <div class="currency-wrapper">
                <div class="text-center mb-3">
                    <h1>üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç</h1>
                    <p style="color: var(--text-secondary);">–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
                </div>

                <div class="card mb-3 converter-card">
                    <div class="form-group">
                        <label for="amount" class="form-label" style="color: #FFFFFF">–°—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</label>
                        <div class="input-container">
                            <input
                                type="number"
                                id="amount"
                                class="form-input"
                                value="1"
                                min="0"
                                step="0.01"
                                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É..."
                            >
                        </div>
                    </div>

                    <div class="currency-selectors">
                        <div class="selector-group">
                            <label for="fromCurrency" class="form-label" style="color: #FFFFFF">–ò–∑ –≤–∞–ª—é—Ç—ã</label>
                            <select id="fromCurrency" class="form-select">
                                <option value="USD">USD - –î–æ–ª–ª–∞—Ä –°–®–ê</option>
                                <option value="EUR">EUR - –ï–≤—Ä–æ</option>
                                <option value="GBP">GBP - –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤</option>
                                <option value="JPY">JPY - –Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞</option>
                                <option value="PLN">PLN - –ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π</option>
                                <option value="RUB">RUB - –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å</option>
                            </select>
                        </div>

                        <button id="swapCurrencies" class="swap-btn">
                            ‚áÑ
                        </button>

                        <div class="selector-group">
                            <label for="toCurrency" class="form-label" style="color: #FFFFFF">–í –≤–∞–ª—é—Ç—É</label>
                            <select id="toCurrency" class="form-select">
                                <option value="EUR">EUR - –ï–≤—Ä–æ</option>
                                <option value="USD">USD - –î–æ–ª–ª–∞—Ä –°–®–ê</option>
                                <option value="GBP">GBP - –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤</option>
                                <option value="JPY">JPY - –Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞</option>
                                <option value="PLN">PLN - –ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π</option>
                                <option value="RUB" selected>RUB - –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å</option>
                            </select>
                        </div>
                    </div>

                    <button id="convertBtn" class="btn convert-btn">
                        üí∞ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>

                    <div id="currency-results">
                        <div class="card text-center p-3 default-state">
                            <p style="color: var(--text-muted);">–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</p>
                        </div>
                    </div>
                </div>

                <div class="card popular-rates-card">
                    <h3 class="text-center mb-2">üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ä—Å—ã</h3>
                    <div id="popular-rates" class="popular-rates-grid">
                        <!-- –ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ä—Å—ã -->
                    </div>
                </div>
            </div>
        </section>
    `;
}

Currency.init = function() {
    const apiKey = '20a59c4e882a0bf4930e55a5';

    const amountInput = document.getElementById('amount');
    const fromCurrency = document.getElementById('fromCurrency');
    const toCurrency = document.getElementById('toCurrency');
    const swapBtn = document.getElementById('swapCurrencies');
    const convertBtn = document.getElementById('convertBtn');
    const resultsContainer = document.getElementById('currency-results');
    const popularRatesContainer = document.getElementById('popular-rates');

    let cache = new Map();
    const cacheTimeout = 300000; // 5 –º–∏–Ω—É—Ç

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
    async function getExchangeRate(from, to) {
        const cacheKey = `${from}-${to}`;
        const cached = cache.get(cacheKey);

        if (cached && Date.now() - cached.timestamp < cacheTimeout) {
            return cached.rate;
        }

        try {
            const response = await fetch(`https://v6.exchangerate-api.com/v6/${apiKey}/latest/${from}`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            if (data.result !== "success") {
                throw new Error("API returned error");
            }

            const rate = data.conversion_rates[to];

            if (!rate) {
                throw new Error(`Currency ${to} not found`);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            cache.set(cacheKey, {
                rate: rate,
                timestamp: Date.now(),
            });

            return rate;
        } catch (error) {
            console.error('Exchange rate error:', error);
            throw error;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    async function convertCurrency() {
        const amount = parseFloat(amountInput.value);
        const from = fromCurrency.value;
        const to = toCurrency.value;

        if (!amount || amount <= 0) {
            displayError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            return;
        }

        convertBtn.disabled = true;
        convertBtn.textContent = '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...';

        try {
            const rate = await getExchangeRate(from, to);
            const convertedAmount = amount * rate;

            displayResult(amount, from, to, convertedAmount, rate);
            await loadPopularRates();
        } catch (error) {
            console.error('Conversion error:', error);
            displayError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } finally {
            convertBtn.disabled = false;
            convertBtn.textContent = 'üí∞ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å';
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    function displayResult(amount, from, to, convertedAmount, rate) {
        const formattedAmount = formatNumber(amount);
        const formattedConverted = formatNumber(convertedAmount);
        const formattedRate = formatNumber(rate);

        resultsContainer.innerHTML = `
            <div class="conversion-success">
                <div class="conversion-main">
                    <h2>${formattedAmount} ${from} = ${formattedConverted} ${to}</h2>
                </div>
                <div class="conversion-rate">
                    <p>1 ${from} = ${formattedRate} ${to}</p>
                </div>
            </div>
        `;
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
    function displayError(message) {
        resultsContainer.innerHTML = `
            <div class="card text-center error-state">
                <div class="error">
                    <h3 style="color: var(--accent-color); margin-bottom: 1rem;">‚ö†Ô∏è –û—à–∏–±–∫–∞</h3>
                    <p>${message}</p>
                </div>
            </div>
        `;
    }

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    async function loadPopularRates() {
        const baseCurrency = 'USD';
        const popularCurrencies = ['EUR', 'GBP', 'JPY', 'RUB'];

        try {
            const rates = await getExchangeRates(baseCurrency, popularCurrencies);
            displayPopularRates(baseCurrency, rates);
        } catch (error) {
            console.error('Error loading popular rates:', error);
            popularRatesContainer.innerHTML = '<p style="color: var(--text-muted); text-align: center;">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã</p>';
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫—É—Ä—Å–æ–≤
    async function getExchangeRates(base, targets) {
        try {
            const response = await fetch(`https://v6.exchangerate-api.com/v6/${apiKey}/latest/${base}`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            if (data.result !== "success") {
                throw new Error("API returned error");
            }

            const rates = {};
            targets.forEach(currency => {
                rates[currency] = data.conversion_rates[currency];
            });

            return rates;
        } catch (error) {
            console.error('Exchange rates error:', error);
            throw error;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    function displayPopularRates(base, rates) {
        popularRatesContainer.innerHTML = '';

        Object.entries(rates).forEach(([currency, rate]) => {
            const rateItem = document.createElement('div');
            rateItem.className = 'rate-item';
            rateItem.innerHTML = `
                <div class="rate-pair">${base}/${currency}</div>
                <div class="rate-value">${formatNumber(rate)}</div>
            `;
            popularRatesContainer.appendChild(rateItem);
        });
    }

    // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
    function formatNumber(num) {
        return new Intl.NumberFormat('ru-RU', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 4
        }).format(num);
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç
    function swapCurrencies() {
        const fromValue = fromCurrency.value;
        const toValue = toCurrency.value;

        fromCurrency.value = toValue;
        toCurrency.value = fromValue;

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞
        if (amountInput.value && amountInput.value > 0) {
            convertCurrency();
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞
    function validateInput() {
        let value = amountInput.value;
        if (value < 0) {
            amountInput.value = 0;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    convertBtn.addEventListener('click', convertCurrency);

    swapBtn.addEventListener('click', swapCurrencies);

    amountInput.addEventListener('input', validateInput);

    amountInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            convertCurrency();
        }
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∞–ª—é—Ç
    fromCurrency.addEventListener('change', () => {
        if (amountInput.value && amountInput.value > 0) {
            convertCurrency();
        }
    });

    toCurrency.addEventListener('change', () => {
        if (amountInput.value && amountInput.value > 0) {
            convertCurrency();
        }
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã
    amountInput.addEventListener('input', () => {
        if (amountInput.value && amountInput.value > 0) {
            convertCurrency();
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
            resultsContainer.innerHTML = `
                <div class="card text-center p-3 default-state">
                    <p style="color: var(--text-muted);">–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</p>
                </div>
            `;
        }
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ä—Å—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    loadPopularRates();
};
